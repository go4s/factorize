// Code generated by {{.BinName}}. DO NOT EDIT.
//
// Copyright {{.BinYear}} {{.BinAuth}} . All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

package {{.PktName}}

import (
    "github.com/go4s/configuration"
    "github.com/pkg/errors"
    "sync"
)

var (

    ErrDuplicated = errors.New("duplicated")
    ErrMissing    = errors.New("missing")
)

func initialize() {
    defaultRegistry = &registry{map[string]Builder{}, noopLocker{}}
}

type (
    OptionModifier func(Option) error
    Builder        interface {
        Build(configuration.Configuration, ...OptionModifier) ({{.TypName}}, error)
    }
)
type (
    Registry interface {
        Register(string, Builder) error
        Factory(string) (Builder, error)
    }

    registry struct {
        state  map[string]Builder
        locker sync.Locker
    }
    noopLocker struct{}
)

func (_ noopLocker) Lock()   {}
func (_ noopLocker) Unlock() {}

func (r *registry) Register(s string, generator Builder) error {
    r.locker.Lock()
    defer r.locker.Unlock()
    if _, found := r.state[s]; found {
        return errors.Wrapf(ErrDuplicated, "with name %s", s)
    }
    r.state[s] = generator
    return nil
}
func (r *registry) Factory(s string) (Builder, error) {
    r.locker.Lock()
    defer r.locker.Unlock()
    if g, found := r.state[s]; found {
        return g, nil
    }
    return nil, errors.Wrapf(ErrMissing, "with name %s", s)
}

func NewRegistry(locker sync.Locker) Registry {
    if locker == nil {
        locker = &sync.Mutex{}
    }
    return &registry{map[string]Builder{}, locker}
}

func Register(s string, g Builder) error { return RegisterWithRegistry(defaultRegistry, s, g) }
func Factory(s string) (Builder, error)  { return FactoryWithRegistry(defaultRegistry, s) }

func RegisterWithRegistry(r Registry, s string, g Builder) error { return r.Register(s, g) }
func FactoryWithRegistry(r Registry, s string) (Builder, error)  { return r.Factory(s) }

func init() {
    initializer.Do(initialize)
}

var (
    initializer = sync.Once{}
    defaultRegistry Registry
)
